/* 
  1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
  Find the sum of all the multiples of 3 or 5 below 1000.
*/
const SumMult3or5 = (n) => {
  let sum = 0
  for(let i = 0; i < n; i++) {
    if(i % 3 === 0 || i % 5 === 0) sum += i
  }
  return sum
}
// console.log(SumMult3or5(1000))
// ANSWER: 233168



/*
  2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
const evenFibNums = () => {
  let num1 = 0, num2 = 1, next = 0, sum = 0
  function fib() {
    next = num1 + num2
    num1 = num2
    num2 = next
    next % 2 === 0 ? sum += next : sum += 0
  }
  while(next <= 4000000) fib()
  return sum
}
// console.log(evenFibNums())
// ANSWER: 4613732



/*
  3.The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
const largestPrimeFactor = (num) => {
  let primes = findPrimes(12345)
  let primeFactors = []

  let i = 0
  let temp = num

  while(
    primeFactors.reduce(
      (prev, curr) => prev * curr, 1
    ) !== num) {
    if(temp % primes[i] === 0) {
      temp /= primes[i]
      primeFactors.push(primes[i])
    } else {
      i++
    } 
  }

  function findPrimes(n) {
    let primes = [2]
    for(let i = 3; i <= n; i++){
      if(((i / 2) % 2 !== 0)) {
        let check = true
        primes.forEach(prime => {
          if(i % prime === 0) check = false 
        })
        if(check) primes.push(i)
      }
    }
    return primes
  }

  return Math.max(...primeFactors)
}
// console.log(largestPrimeFactor((600851475143)))
// ANSWER: 6857



/*
  4. A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
const largestPalindromeNumber = () => {
  let high = 0
  for(let i = 999; i > 800; i--) {
    for(let j = 999; j > 800; j--) {
      let temp = (i*j).toLocaleString().split('')
      if(temp[0] === temp[6] && temp[1] === temp[5] && temp[2] === temp[4]) {
        if((i * j) > high) high = i * j
      }
    }
  }
  return high
}
// console.log(largestPalindromeNumber())
// ANSWER: 906,609 from [993, 913]


/*
  5.2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
const smallestMultiple = () => {
  let done = false
  let i = 2520
  while(!done) {
    i++
    for(let j = 1; j <= 20; j++) {
      if(i % j !== 0) break 
      else if(j === 20) done = true
    }
  }
  return i
}
// console.log(smallestMultiple())
// ANSWER: 232792560


/*
  6. The sum of the squares of the first ten natural numbers is, 
      1^2 + 2^2 + ... + 10^2 = 385
  The square of the sum of the first ten natural numbers is,
      (1 + 2 + ... + 10)^2 = 55^2 = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .
      3025 - 385 = 2640
  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/
const sumSquareDifference = () => {
  let range = [...Array(101).keys()]
  range.shift()
  let sumSquare = 0
  range.forEach(num => sumSquare += num**2)
  let squareSum = (range.reduce((a,b) => a + b, 0))**2
  return squareSum - sumSquare
}
// console.log(sumSquareDifference())
// ANSWER: 25164150


/*
  7. By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10 001st prime number?
*/
const lateStagePrime = () => {

  function isPrime(n) {
    if(n === 1) return false
    let sqrtN = Math.floor(Math.sqrt(n))
    for(let i = 2; i <= sqrtN; i++){
      if(n % i === 0) return false
    }
    return true
  }

  let primes = []
  for(let i = 0; primes.length <= 10001; i++) {
    if(isPrime(i)) primes.push(i)
  }
  return Math.max(...primes)
}
// console.log(lateStagePrime())
// ANSWER: 104743

